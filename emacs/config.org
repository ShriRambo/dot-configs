#+TITLE: Emacs config in org mode
#+AUTHOR: Shriram Ashirgade
#+STARTUP: content hidestars indent
#+DATE: [2022-01-01]

* Startup Performance
Reduce garbage collection frequency and print startup time on every startup.

#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

* 📦 Package management
** Use [[https://melpa.org/#/][MELPA]] for package archive
Adding melpa package repository and initialize

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '( ;("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
#+end_src

Note that you'll need to run ~M-x package-refresh-contents~ or ~M-x package-list-packages~ to ensure that Emacs has fetched the MELPA package list before you can install packages with M-x package-install or similar. Following does that automatically

#+begin_src emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** Make sure that ~use-package~ is loaded
This downloads ~use-package~ package if not installed.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* 🎨 Theme
** VSCode dark theme
 #+BEGIN_SRC emacs-lisp :tangle no
 (use-package vscode-dark-plus-theme
   :ensure t
   :config
   (load-theme 'vscode-dark-plus t))
 #+END_SRC

** Doom theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-tomorrow-night t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;(doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    ;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** Zenburn theme
 #+BEGIN_SRC emacs-lisp :tangle no
 (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
 (load-theme 'zenburn-theme t)
 #+END_SRC

** No background in terminal mode
Do not use theme background in terminal mode
So we can use classic terminal view
#+BEGIN_SRC emacs-lisp
  ;; No background when in terminal mode (to use default terminal background )
  (defun rambo/no-bg-in-term ()
  (unless (display-graphic-p (selected-frame))
  (set-face-background 'default "unspecified-bg" (selected-frame))))
  
  (add-hook 'window-setup-hook 'rambo/no-bg-in-term)
  ;Set org block background to unspec
  (set-face-background 'org-block "unspecified-bg")
   #+END_SRC
   
* 🍉 Terminal specific settings 
** Enable Xterm-mouse-mode
To be able to click-around with mouse
   #+BEGIN_SRC emacs-lisp
   (xterm-mouse-mode t)
   #+END_SRC

**  Smooth scrolling
Scroll one line at a time, to make it feel like smooth.
#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control) . nil)))
#+end_src
* ⚔ Mode line
** Doom modeline
Description
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

(setq doom-modeline-vcs-max-length 30)
#+END_SRC
* 🦠 Basic UX settings
** Startup screen
Disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen 0)
#+END_SRC
** Neo tree side buffer
Using neotree to show current dir (Don't know how to use dired)
First config command adds neotree to startup hook so that it loads on startup
Second config command adds multiline mode to neotree so that long file names are shown by textwrap
#+BEGIN_SRC emacs-lisp :tangle no
(use-package neotree
   :ensure t
   :config
   ; Load neotree on startup
   ;(add-hook 'emacs-startup-hook 'neotree)
   ; Visual line mode on neotree biffer
   (add-hook 'neotree-mode-hook 'visual-line-mode)
   :bind
   ("C-a" . neotree-toggle))
#+END_SRC
Deprecated in favour of ~Treemacs~
** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :config
  (progn
    (setq treemacs-width                           25
          treemacs-width-is-initially-locked       nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-indent-guide-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-a"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

; Oher additions for treemacs
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

; Nerd icons for treemacs
(use-package treemacs-nerd-icons
  :config
  (treemacs-load-theme "nerd-icons"))


(defun aorst/treemacs-setup-title ()
  (let ((bg (face-attribute 'default :background))
        (fg (face-attribute 'default :foreground)))
    (face-remap-add-relative 'header-line
                             :background bg :foreground fg
                             :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
  (setq header-line-format
        '((:eval
           (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
                  (extra-align (+ (/ (length text) 2) 1))
                  (width (- (/ (window-width) 2) extra-align)))
             (concat (make-string width ?\s) text))))))

(add-hook 'treemacs-mode-hook 'aorst/treemacs-setup-title)
  #+end_src
  
** Fancy icons in GUI
Display fancy icons when in gui 
#+BEGIN_SRC emacs-lisp :tangle no
(when (display-graphic-p)
  (require 'all-the-icons))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
     :ensure t
     :init (which-key-mode)
     :config (setq which-key-idle-delay 0.7))
#+END_SRC
** Yes or No to y or n
Instead of typing full *yes* or *no*, we just write *y* or *n*. Save some time for your girl.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** No saving backups. We don't need them :D
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Beacon mode 
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Camel Case (Make it only for prog mode)
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Electric pairs
Closing matching brackets and quotes.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

** No More Tabs

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
** Hungry delete 
To remove all lagging spaces all at once
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** TODO Jump sentence for C-n C-p
#+begin_src emacs-lisp :tangle no
(keymap-global-set "C-n" 'forward-sentence)
(keymap-global-set "C-p" 'backward-sentence)
;; Make it mode specific?
;(defun rambo/jump-sentences ()
 ; "Custom keybindings for programming modes."
 ; (local-set-key (kbd "C-p") 'backward-sentence)
 ; (local-set-key (kbd "C-n") 'forward-sentence))

;(add-hook 'prog-mode-hook #'rambo/jump-sentences)
#+end_src
** Sudo edit
Do I really need it?
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
** Rainbow delimiters
Only for prog mode?
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook ((prog-mode . rainbow-delimiters-mode)))
          ; (org-mode . rainbow-delimiters-mode)))
#+END_SRC
** Fancy killring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Pretty characters mode
This turns common programming keywords and symbol names to actual symbol. While this may be good in some situations, I do not want it enabled by default.
,#+BEGIN_SRC emacs-lisp :tangle no
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config (global-pretty-mode 1)))
#+END_SRC 
** Open maximised
#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+END_SRC
** Escape to quit prompt
Press ~ESC~ to quit the prompt
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** No menu bar, tool bar, and scroll bar
Removing tool bar on top. Let's be honest, who uses it. ...
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** CUA mode ( for copy paste )
Usual C-c C-v for copy paste
#+BEGIN_SRC emacs-lisp :tangle no
;;; Auto CUA mode
(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(transient-mark-mode 1) ;; No region when it is not highlighted
(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
#+END_SRC
** Auto line number
To always have line numbers on the side

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (line-number-mode 1)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  neotree-mode-hook
		      treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

Showing relative line numbers
#+BEGIN_SRC emacs-lisp :tangle no
(setq display-line-numbers-type 'relative)
#+END_SRC
** Move custom files outside ~init.el~
   Move all ~custom-*~ stuff into ~custom.config.el~. Do not put them in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.conf.el")
(load-file custom-file)
#+end_src
** Text wrapping
Turn on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][visual-line-moe]] for text and org files. This wraps words by word boundaries.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'org-mode 'visual-line-mode)
#+end_src

** Dired
Using nerd-icons in dired
#+begin_src emacs-lisp
(use-package nerd-icons-dired
	:hook
	(dired-mode . nerd-icons-dired-mode))
#+end_src
* 🦄 Org mode
** Pin Org mode
#+begin_src emacs-lisp
(use-package org
  :pin elpa
  :bind (:map org-mode-map
  ; Following is not needed. Pressing 's' does the same
  ;( "C-c z" . org-toggle-narrow-to-subtree )
))
#+end_src
** Org Crypt
#+begin_src emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
(setq org-crypt-key nil)
;; GPG key to use for encryption.
;; nil means  use symmetric encryption unconditionally.
;; "" means use symmetric encryption unless heading sets CRYPTKEY property.
(setq auto-save-default nil)
;; Prompt for password in minibuffer
(setq epg-pinentry-mode 'loopback)
#+end_src

** Org Capture
Location where all captured notes will go. All the org roam files are also in the same folder
#+begin_src emacs-lisp :tangle no
(setq org-default-notes-file  "~/notes/inbox.org")
#+end_src

Template for meetings.
#+begin_src emacs-lisp
(defun rambo/org-capture-template-meeting ()
  "Generate a dynamic Org capture template string."
   '"* TODO %?\nSCHEDULED: %^{Scheduled date}T\n")
#+end_src

Template for Tasks to be done today.
#+begin_src emacs-lisp
(defun rambo/org-capture-template-todo-today ()
  "Generate a dynamic Org capture template string."
  '"* TODO %?\nSCHEDULED: %t\n")
#+end_src

Template for Tasks to be done now.
#+begin_src emacs-lisp
(defun rambo/org-capture-template-todo-now ()
  "Generate a dynamic Org capture template string."
  '"* WIP %?    :adhoc:\nSCHEDULED: %t\n")
#+end_src

Template for Tasks to be done later, with a scheduled dte.
#+begin_src emacs-lisp
(defun rambo/org-capture-template-todo-later ()
  "Generate a dynamic Org capture template string."
  '"* TODO %?\nSCHEDULED: %^{Scheduled date}t\n")
#+end_src

Template for Tasks with a deadline.
#+begin_src emacs-lisp
(defun rambo/org-capture-template-todo-deadline ()
  "Generate a dynamic Org capture template string."
  '"* TODO %?\nDEADLINE: %^{Deadline}t\n")
#+end_src

Template for House
#+begin_src emacs-lisp
(defun rambo/org-capture-template-house-koop ()
  "Generate template string for house"
  (concat "* TOVIEW %?\n"
      ":PROPERTIES:\n"
      ":COST: %?K\n"
      ":AREA: %?m2\n"
      ":ENERGYLABEL: %?\n"
      ":BUURT: %?\n"
      ":LINK: [[%?][funda]]\n"
      ":END:"))
#+end_src

Create capture templates:
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("ma" "Meeting or Appointment" entry 
          (file+olp "~/notes/meetings.org" ,(format-time-string "%Y") ,(format-time-string "%B")) 
          (function rambo/org-capture-template-meeting))
        ("tt" "Task for today" entry
          (file+olp+datetree "~/notes/tasks.org" "Things to do Today")
          (function rambo/org-capture-template-todo-today))
        ("ts" "Task for someday" entry
          (file+olp+datetree "~/notes/tasks.org" "Things for Later")
          (function rambo/org-capture-template-todo-later))
        ("td" "Task with deadline" entry
          (file+olp+datetree "~/notes/tasks.org" "Things for Later")
          (function rambo/org-capture-template-todo-deadline))
        ("tn" "Task for now" entry
          (file+olp+datetree "~/notes/tasks.org" "Things to do Today")
          (function rambo/org-capture-template-todo-now) :prepend t :clock-in t :clock-keep nil :jump-to-captured t )
       ("ha" "House hunting" entry
          (file"~/notes/househunt.org")
          (function rambo/org-capture-template-house-koop) :prepend t :jump-to-captured t)
))
#+end_src

** Org Agenda
Only gather agenda entries from meetings and tasks.
#+begin_src emacs-lisp
(setq org-agenda-files '("~/notes/meetings.org" "~/notes/tasks.org"))
; To solve the problem of tags being displayed out of window.
(setq org-agenda-align-tags-to-column 150)
#+end_src

** Open links in chrome when using in WSL

#+begin_src emacs-lisp
; TODO: Check if system is WSL
(if (not (eq system-type 'gnu/linux))
    (setq browse-url-generic-program "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe"
    browse-url-browser-function 'browse-url-generic)
    ; optional else
)
#+end_src

** Org bable
+ Org bable load languages
 #+BEGIN_SRC emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (shell . t)
      (js . t)))
 #+END_SRC

+  Org bable no confirmation for following languages
 #+BEGIN_SRC emacs-lisp
 (defun my-org-confirm-babel-evaluate (lang body)
   (not (member lang '("python" ))))
 (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
 #+END_SRC

+  Language specific commands
  -  Python command
     #+BEGIN_SRC emacs-lisp
     (setq org-babel-python-command "python3")
      #+END_SRC
+ Org html export, preserve indentation in src blocks
#+BEGIN_SRC emacs-lisp
  (setq ;org-edit-src-content-indentation 0
        ;org-src-tab-acts-natively t
        org-src-preserve-indentation t)
#+END_SRC
** Org todo->done log time stamp
Log a timestamp when a TODO is changed to DONE state
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

And log it to a drawer
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
(setq org-log-into-drawer t)
(setq org-log-state-into-drawer t)
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Elipsis
The end of the heading character that will show that the heading is folded
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ⤵")
#+END_SRC
Other interesting characters are ▼ , ↴ , ⬎ , ⤷ , and ⋱ 
** Leading stars and indentation
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-hide-leading-stars t)
#+END_SRC
** Hide emphasis markers
Hide the ~code~, /italics/ and *bold* _underline_ =verbatim= ++strike-through++
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers nil)
#+END_SRC 
** Pretty symbols
Show pretty symbols like \lambda instead of \ lambda
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
** TODO Custom faces for different headline level
These are having some issues with toto font size being too small so check it out
#+BEGIN_SRC emacs-lisp :tangle no
  (custom-theme-set-faces
       'user
      `(org-level-4 ((t ( :height 1.1   ))))
     `(org-level-3 ((t ( :height 1  ))))
    `(org-level-2 ((t ( :height 1.1   ))))
   `(org-level-1 ((t ( :height 1.25  ))))
   `(org-document-title ((t ( :height 1.5 :underline nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (dolist (face '((org-level-1 . 1.3)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

#+END_SRC
** Variable pitch mode ? Ye kya hai re bava?
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'org-mode-hook 'variable-pitch-mode)
#+END_SRC
** Structured templates
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("css" . "src css"))
(add-to-list 'org-structure-template-alist '("html" . "src html"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
(add-to-list 'org-structure-template-alist '("yml" . "src yaml"))
#+END_SRC

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src
** Src edit window no split
Do not split while editing ~src~ with ~C-c '~
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Task Workflow
Each task that is to be done is assigned =TODO=
The task which is being worked on is assigned =TODO=
The task which was started, but is on hold due to oter task being worked on, or waiting for something else is assigned =IDLE=
Finished task is marked as =DONE=
Task decided not to do or delegated is assigned =NOPE=
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "WIP" "IDLE" "|" "DONE" "NOPE")))
#+end_src

Colors for TODO keywords

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("WIP" . (:foreground "red" :weight bold))
        ("IDLE" . (:foreground "gold" :weight bold))))
#+end_src

Whenever a task is switched from =TODO= to =WIP=, clock in.
Whenever a task is switched from =WIP= to =IDLE=, clock out.
Org-mode will auto clock out when switching to a done state.

#+begin_src emacs-lisp
(defun rambo/org-clock-in ()
  "Clock in an Org mode task when the status is changed to 'WIP'."
  (when (and (eq major-mode 'org-mode)
             (not (org-clocking-p))
             (member (or (org-get-todo-state) "") '("WIP")))
    (org-clock-in)))

(defun rambo/org-clock-out ()
  "Clock out an Org mode task when the status is changed to 'IDLE'."
  (when (and (eq major-mode 'org-mode)
             (org-clocking-p)
             (member (or (org-get-todo-state) "") '("IDLE")))
    (org-clock-out)))

(defun rambo/org-clock-out-on-exit ()
  "Clock out if there is an active clock before Emacs exits."
  (ignore-errors (when (org-clocking-p)  ;; Check if a task is currently clocked in
    (org-clock-out))))     ;; Clock it out. If errors, ignore.

(defun rambo/org-change-todo-wip ()
  "Change todo state of a task to WIP when clocking in"
  (when (and (org-clocking-p) 
             (member (or (org-get-todo-state) "") '("TODO" "IDLE")))
             (org-todo "WIP")))

(defun rambo/org-change-todo-idle ()
  "Change todo state of a task from WIP or TODO to IDLE when clocking out"
   (when (and (not (org-clocking-p))
              (member (or (org-get-todo-state) "") '("WIP")))
              (org-todo "IDLE")))

(add-hook 'org-clock-in-hook #'rambo/org-change-todo-wip)
(add-hook 'org-clock-out-hook #'rambo/org-change-todo-idle)
(add-hook 'org-after-todo-state-change-hook #'rambo/org-clock-in)
(add-hook 'org-after-todo-state-change-hook #'rambo/org-clock-out)
(add-hook 'kill-emacs-hook #'rambo/org-clock-out-on-exit)
#+end_src
** Emoji in org buffer
To make org documents more beautiful, add support for emoji with =emojify= package.
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :hook (org-mode . emojify-mode)
  :commands emojify-mode)
#+END_SRC
** Links

Example ticket [[jira:IT-1321]] and bitbucket repo or PR [[bibu:streaming-transforms:88]]

#+begin_src emacs-lisp
(org-link-set-parameters "jira"
    ;; When you click on such links, take you to jira ticket
    :follow (lambda (label) (browse-url (concat "https://northpool.atlassian.net/browse/" label)))
    ;:display 'full
    ;; Show Jira links in green
    :face '(:foreground "green":weight bold :underline t))

(org-link-set-parameters "bibu"
    ;; When you click on such links, take you to jira ticket
    :follow (lambda (label)
                (let* ((parts (split-string label ":"))
                       (repo (nth 0 parts))
                       (pr (nth 1 parts))
                       (path (if pr (concat "/pull-requests/" pr) nil)))
                (browse-url (concat "https://bitbucket.org/northpool/" repo path))))
    ;:display 'full
    ;; Show Jira links in green
    :face '(:foreground "blue":weight bold :underline t))
#+end_src


** Tags

Sort tags alphabetically
#+begin_src emacs-lisp
(setq org-tags-sort-function 'string-collate-lessp)
#+end_src
* Org-roam
#+begin_src emacs-lisp :tangle no
(use-package org-roam
  :ensure t
  :require org
  (org-roam-directory "~/notes/roam")
  :bind (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
	    ("C-c n i" . org-roam-node-insert))
  :config (org-roam-setup))
#+end_src
* 🚶🏽 Moving around
** TODO Jump n lines up and down and use relative linum
** Ido
I do this and I do that
~C-x C-f~ for using IDO to find file
#+BEGIN_SRC emacs-lisp :tangle no
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
For simply switching buffer
#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
*** Verticle Ido
Seems nice. But this depends on Ido, so keep the Ido section
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
#+END_SRC
** Ibuffer
To enter Ibuffer (gives a bit detailed view) 
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Smex
For easy ~M-x~
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Ace jump mode
To jump around buffer/windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind
    ("M-s" . 'ace-jump-mode)
    ("C-x j c" . 'ace-jump-char-mode)
    ("C-x j w" . 'ace-jump-word-mode)
    ("C-x j l" . 'ace-jump-line-mode))
#+END_SRC
** Split window improvement
This change willnot just split window but also follow to the new window.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Swiper for search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish
      :bind (("C-x b" . ivy-switch-buffer)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)	
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))

      :config
      (ivy-mode 1))
#+END_SRC
** Counsel for minibuffer help comes with ivy
#+BEGIN_SRC emacs-lisp 
  (use-package counsel
      :ensure t
      :bind (("M-x" . counsel-M-x)
             ("C-c C-j" . counsel-imenu)
             ("C-x f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config 
             (setq ivy-initial-inputs-alist nil)  ;Removes initial ^
             (setq imenu-flatten t))
#+END_SRC
** Ivy rich
Some helpful transformations for ~Ivy~ and ~Counsel~
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line))
#+END_SRC
** Ivy prescient
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode 1)
  (prescient-persist-mode 1))

(setq prescient-sort-length-enable nil)

;(setq prescient-filter-method '(literal fuzzy))
(setq ivy-prescient-retain-classic-highlighting t)
(setq ivy-prescient-enable-filtering nil)
#+end_src
** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
     :custom
     (counsel-describe-function-function #'helpful-callable)
     (counsel-describe-variable-function #'helpful-variable)
     :bind 
     ([remap describe-function] .  counsel-describe-function)
     ([remap describe-symbol]  . helpful-symbol)
     ([remap describe-variable] . counsel-describe-variable)
     ([remap describe-command] .  helpful-command)
     ([remap describe-key] .  helpful-key))
#+END_SRC

* 🦦 Others
** Rainbow
For generative work (shows colors with that color background)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package rainbow-mode
    :ensure t
    :init (add-hook prog-mode-hook 'rainbow-mode))
#+END_SRC
** Yasnippet
For inserting standard snippets and making
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    :hook (prog-mode . yas-minor-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
** HTMLIZE
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
 ; (use-package ox-publish)
  (setq   org-html-htmlize-output-type 'css     ;; Instead of using inline css for each element
          org-html-doctype "html5"
          org-html-html5-fancy nil)
#+END_SRC
** Git gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
 ;:straight git-gutter-fringe
  :diminish
  :hook ((text-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode))
  :config
  (setq git-gutter:update-interval 2)

  ;; These characters are used in terminal mode
  (setq git-gutter:modified-sign "▎")
  (setq git-gutter:added-sign "▎")
  (setq git-gutter:deleted-sign "▎")
  (set-face-foreground 'git-gutter:added "LightGreen")
  (set-face-foreground 'git-gutter:modified "LightGoldenrod")
  (set-face-foreground 'git-gutter:deleted "LightCoral"))
#+END_SRC

When in GUI mode use, use bitmaps for git gutter.
#+begin_src emacs-lisp
 (defun rambo/git-gutter-fringe-bitmap ()
     (unless not (display-graphic-p (selected-frame))
       (use-package git-gutter-fringe
	 :config
	 (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
	 (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
	 (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
))

   (add-hook 'window-setup-hook 'rambo/git-gutter-fringe-bitmap)
#+end_src
* 🗿 Custom functions
** Kill word improvement
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "M-d") 'kill-whole-word)	     
#+END_SRC

* 🧬 lsp-mode
This mode helps design IDE for different programming interfaces.
#+BEGIN_SRC emacs-lisp
(defun rambo/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headline-breadcrumb-icons-enable t)
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . rambo/lsp-mode-setup)
  :init  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  )
#+END_SRC

** Breadcrumbs on top
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Company mode

#+BEGIN_SRC emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind
  (:map company-active-map
	      ("<tab>" . company-indent-or-complete-common))
  (:map lsp-mode-map
	("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+END_SRC

** lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  ;:custom
  ;(lsp-ui-doc-position 'bottom)
  )
#+END_SRC
** Sideline
#+BEGIN_SRC emacs-lisp
(setq lsp-ui-sideline-enable t)
(setq lsp-ui-sideline-show-hover nil)
#+END_SRC
** lsp-ivy
#+BEGIN_SRC emacs-lisp
(use-package lsp-ivy)
#+END_SRC
** Additional keybindings
*** TODO Keybinding for comment-or-uncomment

** Python lsp 
#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode
  :hook (python-mode . pyenv-mode)
)

(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  (python-shell-interpreter "python3"))
#+END_SRC

** Autopep8

#+begin_src emacs-lisp :tangle no
(use-package py-autopep8
  :hook ((python-mode) . py-autopep8-mode))
#+end_src
** Vue3
#+begin_src emacs-lisp
(use-package vue-mode
  :defer t )

; Use 4  space as indent for Vue-html
(setq-default sgml-basic-offset 4)
#+end_src

** Dockerfile
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :defer t)
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :hook (python-mode . flycheck-mode))
(setq flycheck-check-syntax-automatically '(save mode-enable))
#+end_src
** Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :hook ((prog-mode . tree-sitter-hl-mode)))
#+end_src

** Pyvenv
#+begin_src emacs-lisp
(setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
#+end_src
** Flycheck-Projectile
#+begin_src emacs-lisp
(use-package flycheck-projectile
  :load-path "~/.emacs.d/packages/")
#+end_src
* 🐐 Projectile Mode

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  (setq projectile-project-search-path '("~/Projects/" "~/projects/"))
  (setq projectile-switch-project-action #'projectile-dired)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src

* 💡 To do someday [0/7]
** TODO Autocomplete? Company?
** TODO [[https://github.com/DarthFennec/highlight-indent-guides][Indentation highlight]]
** TODO Tab bar mode
[[https://www.youtube.com/watch?v=C7ZlNRbWdVI][System Crafters video]]
** TODO [[https://github.com/noctuid/general.el][Geleral.el]] For managing keybindings
** TODO  Using noweb to better organize config
** TODO Projectile on project change activate venv and restart lsp
** TODO Configure pyvenv
** TODO Desktop session save
Check ~desktop save mode~
* 🗃  Archives
The configuration wihich is not in use anymore
** Ivy switch buffer improvement
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ivy
    :diminish
    :bind (("C-x b" . ivy-switch-buffer)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))

    :config
    (ivy-mode 1))
#+END_SRC
** Counsel with helpful
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package counsel
      :ensure t
      :bind ("M-x" . counsel-M-x))

      (:config ((setq counsel-describe-function-function #'helpful-callable)
              (setq counsel-describe-variable-function #'helpful-variable)))
#+END_SRC
* Desktop save mode
#+begin_src emacs-lisp :tangle no
(defun rambo/desktop-save-mode  ()
  (desktop-save-mode t)
  (desktop-read))

(add-hook 'after-init-hook 'rambo/desktop-save-mode)
#+end_src
* 👾 Apply changes
When working on config, invalid config can be pushed. Which makes it difficult to fix.
First make a backup of existing file
#+begin_src shell :results none
cp ~/.emacs.d/config.org ~/.emacs.d/config.org.bkp
#+end_src

Copy the file to the required location
#+begin_src shell :results none
cp config.org ~/.emacs.d/config.org
#+end_src

And reload the emacs config
#+begin_src emacs-lisp :tangle no :results none
(load user-init-file)
#+end_src

If doesn't work out, restorey from the backup
#+begin_src shell :results none
cp ~/.emacs.d/config.org.bkp ~/.emacs.d/config.org
#+end_src
